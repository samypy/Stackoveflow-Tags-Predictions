import os
import glob
import pandas as pd

# set directory path
directory_path = "/path/to/directory"

# check if the directory exists
if not os.path.isdir(directory_path):
    print("Directory does not exist.")
    exit()

# get list of excel files in all subdirectories
excel_files = glob.glob(os.path.join(directory_path, '**/*.xlsx'), recursive=True)

# check if there are any excel files in directory
if not excel_files:
    print("No excel files found in directory.")
    exit()

# read first excel file to get number of columns and headers
df = pd.read_excel(excel_files[0])
num_cols = len(df.columns)
headers = list(df.columns)

# loop through excel files and merge them
for i, excel_file in enumerate(excel_files):
    # read excel file
    df = pd.read_excel(excel_file)
    
    # check if number of columns matches
    if len(df.columns) != num_cols:
        print(f"Skipping {excel_file} because number of columns does not match.")
        continue
    
    # skip header rows for all files except the first one
    if i > 0:
        df = df.iloc[1:]
        df.columns = headers
    
    # merge dataframes
    if i == 0:
        merged_df = df
    else:
        merged_df = pd.concat([merged_df, df], axis=0)
        
# save merged dataframe to excel file
merged_df.to_excel(os.path.join(directory_path, "merged.xlsx"), index=False)
print("Merged file saved to directory.")



import tkinter as tk
from tkinter import filedialog
import fitz

class PDFProcessor:
    def __init__(self, master):
        self.master = master
        self.master.title("PDF Processor")
        self.master.geometry("500x300")
        
        # create log text widget
        self.log_text = tk.Text(self.master, height=10)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # create select pdf button
        self.pdf_button = tk.Button(self.master, text="Select PDF", command=self.select_pdf)
        self.pdf_button.pack(pady=10)
        
        # create select output folder button
        self.output_button = tk.Button(self.master, text="Select Output Folder", command=self.select_output)
        self.output_button.pack(pady=10)
        
        # create process button
        self.process_button = tk.Button(self.master, text="Process", command=self.process_pdf)
        self.process_button.pack(pady=10)
        
        # initialize variables
        self.pdf_file = None
        self.output_folder = None
        
    def select_pdf(self):
        # prompt user to select pdf file
        self.pdf_file = filedialog.askopenfilename(title="Select PDF File", filetypes=[("PDF Files", "*.pdf")])
        self.log(f"Selected PDF file: {self.pdf_file}")
        
    def select_output(self):
        # prompt user to select output folder
        self.output_folder = filedialog.askdirectory(title="Select Output Folder")
        self.log(f"Selected output folder: {self.output_folder}")
        
    def process_pdf(self):
        if not self.pdf_file:
            self.log("Please select a PDF file.")
            return
        if not self.output_folder:
            self.log("Please select an output folder.")
            return
        
        # open input pdf file
        pdf_document = fitz.open(self.pdf_file)
        num_pages = pdf_document.page_count
        self.log(f"Number of pages in PDF: {num_pages}")
        
        # generate images from pdf pages
        for page_num in range(num_pages):
            # get pdf page
            pdf_page = pdf_document[page_num]
            
            # generate image from pdf page
            pix = pdf_page.get_pixmap()
            
            # save image to output folder
            output_file = f"{self.output_folder}/page_{page_num+1}.png"
            pix.save(output_file)
            self.log(f"Page {page_num+1} saved to: {output_file}")
        
        # close pdf document
        pdf_document.close()
        
    def log(self, message):
        # add message to log text widget
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        
if __name__ == "__main__":
    # create main window
    root = tk.Tk()
    
    # create pdf processor UI
    pdf_processor = PDFProcessor(root)
    
    # run UI
    root.mainloop()


import fitz
import os
import PySimpleGUI as sg

def convert_pdf_to_images(pdf_path, output_folder, resolution):
    doc = fitz.open(pdf_path)
    name = os.path.splitext(os.path.basename(pdf_path))[0]
    images_folder = os.path.join(output_folder, name)
    os.makedirs(images_folder, exist_ok=True)
    for i in range(len(doc)):
        page = doc[i]
        rotate = int(0)
        zoom_x = float(resolution) / 100.0
        zoom_y = float(resolution) / 100.0
        trans = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate)
        pm = page.getPixmap(matrix=trans, alpha=False)
        output_file = os.path.join(images_folder, f"{name}_page{i+1}.png")
        pm.writePNG(output_file)

sg.theme('DarkBlue')
layout = [[sg.Text('Select PDF File:'), sg.Input(key='pdf_file'), sg.FileBrowse()],
          [sg.Text('Select Output Folder:'), sg.Input(key='output_folder'), sg.FolderBrowse()],
          [sg.Text('Output Image Resolution (DPI):'), sg.Input(key='resolution', default_text='300')],
          [sg.Button('Convert'), sg.Button('Exit')],
          [sg.Output(size=(60, 15))]]

window = sg.Window('PDF to Image Converter', layout)

while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event == 'Exit':
        break
    if event == 'Convert':
        pdf_file = values['pdf_file']
        output_folder = values['output_folder']
        resolution = values['resolution']
        try:
            convert_pdf_to_images(pdf_file, output_folder, resolution)
            sg.popup('Conversion complete!', title='Success')
        except Exception as e:
            sg.popup(f'Error: {str(e)}', title='Error')
    else:
        continue

window.close()

import os
import fitz
import PySimpleGUI as sg

# Define the PySimpleGUI layout
layout = [
    [sg.Text('Select PDF file: '), sg.Input(key='-FILE-', enable_events=True, visible=False), sg.FileBrowse()],
    [sg.Text('Select output folder: '), sg.Input(key='-FOLDER-', enable_events=True, visible=False), sg.FolderBrowse()],
    [sg.Text('Resolution (dpi): '), sg.Input(key='-RESOLUTION-', default_text='300')],
    [sg.Multiline(key='-LOG-', size=(80, 20), autoscroll=True)],
    [sg.Button('Extract Images'), sg.Button('Exit')]
]

# Create the PySimpleGUI window
window = sg.Window('PDF Image Extractor', layout)

# Event loop
while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event == 'Exit':
        break
    if event == 'Extract Images':
        filename = values['-FILE-']
        output_folder = values['-FOLDER-']
        resolution = int(values['-RESOLUTION-'])

        if not filename:
            sg.popup('Please select a PDF file')
            continue
        if not output_folder:
            sg.popup('Please select an output folder')
            continue

        # Open the PDF file
        pdf = fitz.open(filename)

        # Iterate over each page
        for page in range(pdf.page_count):
            # Get the current page
            current_page = pdf[page]

            # Get the bounding box for the page and apply the rotation
            bbox = current_page.rect
            if current_page.rotation:
                bbox = bbox.rect
                bbox.pre_rotate(-current_page.rotation)

            # Render the page as an image
            pix = current_page.get_pixmap(alpha=False, matrix=bbox, clip=bbox)
            pix = pix.resize((resolution, resolution))

            # Save the image to the output folder
            output_file = os.path.join(output_folder, f'page_{page+1}.png')
            pix.save(output_file)

            # Write to the log
            log_text = f'Saved {output_file}\n'
            window['-LOG-'].print(log_text, end='')

        # Close the PDF file
        pdf.close()

# Close the PySimpleGUI window
window.close()

