Sub CalculateRollingAverage()
    Dim sourceWs As Worksheet, targetWs As Worksheet
    Dim lastRow As Long, lastCol As Long
    Dim dataRange As Range, cell As Range
    Dim yearColumn As Range, accountNameColumn As Range
    Dim monthColumns As Range, valuesRange As Range
    Dim month As String, year As String
    Dim rollingSum As Double
    
    ' Set the source worksheet to work with
    Set sourceWs = ThisWorkbook.Sheets("Sheet1") ' Replace "Sheet1" with your actual sheet name
    
    ' Determine the last row and last column in the source data range
    lastRow = sourceWs.Cells(sourceWs.Rows.Count, 1).End(xlUp).Row
    lastCol = sourceWs.Cells(1, sourceWs.Columns.Count).End(xlToLeft).Column
    
    ' Set the range for the source data
    Set dataRange = sourceWs.Range("A1:E" & lastRow)
    
    ' Set the target worksheet to write the results
    Set targetWs = ThisWorkbook.Sheets.Add(After:=sourceWs) ' Creates a new sheet after the source sheet
    
    ' Rename the target worksheet to a meaningful name
    targetWs.Name = "Rolling Average" ' Replace with your desired name
    
    ' Set the range for the year column (column D) in the source sheet
    Set yearColumn = dataRange.Columns(4)
    
    ' Set the range for the account name column (column B) in the source sheet
    Set accountNameColumn = dataRange.Columns(2)
    
    ' Set the range for the month columns (column C to N) in the target sheet
    Set monthColumns = targetWs.Range("C1:N1")
    
    ' Set the range for the values (duration) to calculate the rolling average in the source sheet
    Set valuesRange = dataRange.Columns(5)
    
    ' Loop through each unique account name in the source sheet
    For Each cell In accountNameColumn.Cells
        ' Get the current year and month
        year = cell.Offset(0, 2).Value
        month = cell.Offset(0, 3).Value
        
        ' Find the corresponding row for the current year and account name in the source sheet
        Set dataRange = sourceWs.Range("A1:E" & lastRow)
        Set dataRange = dataRange.Find(What:=year, LookIn:=xlValues, LookAt:=xlWhole)
        Set dataRange = sourceWs.Range(dataRange.Offset(1, 0), sourceWs.Cells(lastRow, lastCol))
        
        ' Calculate the rolling sum for the current account name, year, and month in the source sheet
        rollingSum = Application.WorksheetFunction.SumIfs(valuesRange, accountNameColumn, cell.Value, yearColumn, year)
        
        ' Find the corresponding month column in the target sheet
        Set cell = monthColumns.Find(What:=month, LookIn:=xlValues, LookAt:=xlWhole)
        
        ' Write the rolling sum value to the corresponding cell in the target sheet
        targetWs.Cells(cell.Row, cell.Column).Value = rollingSum
    Next cell
End Sub

import pandas as pd

# Read the Excel file
df = pd.read_excel('your_file.xlsx', sheet_name='Sheet1')  # Replace 'your_file.xlsx' with your actual file name

# Calculate the rolling sum for each account, year, and month
rolling_df = df.groupby(['Account ID', 'Year', 'Month'])['Duration'].sum().groupby(['Account ID']).rolling(window=6).sum().reset_index()

# Pivot the data to arrange it in the desired format
result = rolling_df.pivot_table(index=['Year', 'Account ID'], columns='Month', values='Duration', fill_value=0).reset_index()

# Save the result to a new Excel file
result.to_excel('rolling_average.xlsx', index=False)


import pandas as pd

# Read the Excel file
df = pd.read_excel('your_file.xlsx', sheet_name='Sheet1')  # Replace 'your_file.xlsx' with your actual file name

# Pivot the data to arrange it in the desired format
result = df.pivot_table(index=['Year', 'Account Name'], columns='Month', values='Duration', aggfunc='sum', fill_value=0).reset_index()

# Reorder the columns to sort months from Jan to Dec
month_columns = [f'{month[:3]}_{year}' for year in ['2021', '2022', '2023'] for month in ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']]
result = result.reindex(columns=month_columns)

# Save the result to a new Excel file
result.to_excel('grouped_data.xlsx', index=False)

import pandas as pd

# Read the Excel file
df = pd.read_excel('your_file.xlsx', sheet_name='Sheet1')  # Replace 'your_file.xlsx' with your actual file name

# Sort the months from Jan to Dec
month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

# Create a new 'Month' column with a custom sort order
df['Month'] = pd.Categorical(df['Month'], categories=month_order, ordered=True)

# Pivot the data to arrange it in the desired format
result = df.pivot_table(index=['Year', 'Account Name'], columns='Month', values='Duration', aggfunc='sum', fill_value=0).reset_index()

# Reorder the columns to sort months from Jan to Dec
result = result.reindex(columns=['Year', 'Account Name'] + month_order)

# Save the result to a new Excel file
result.to_excel('grouped_data.xlsx', index=False)

import pandas as pd

# Read the Excel file
df = pd.read_excel('your_file.xlsx', sheet_name='Sheet1')  # Replace 'your_file.xlsx' with your actual file name

# Sort the DataFrame by Year and Month
df_sorted = df.sort_values(by=['Year', 'Month'])

# Create a list of month abbreviations sorted from Jan to Dec
months_ordered = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

# Reindex the DataFrame with the sorted months
result = df_sorted.reindex(columns=['Year', 'Account Name'] + months_ordered)

# Reset the index of the DataFrame
result.reset_index(drop=True, inplace=True)

# Save the result to a new Excel file
result.to_excel('grouped_data.xlsx', index=False)


import pandas as pd

# Read the Excel file
df = pd.read_excel('your_file.xlsx', sheet_name='Sheet1')  # Replace 'your_file.xlsx' with your actual file name

# Define the sort order for the months
month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

# Map month names to numerical representation
month_mapping = {month: i+1 for i, month in enumerate(month_order)}
df['Month'] = df['Month'].map(month_mapping)

# Pivot the data to arrange it in the desired format
result = df.pivot_table(index=['Year', 'Account Name'], columns='Month', values='Duration', aggfunc='sum', fill_value=0).reset_index()

# Sort the columns by month
result = result.reindex(columns=['Year', 'Account Name'] + sorted(result.columns[2:]))

# Save the result to a new Excel file
result.to_excel('grouped_data.xlsx', index=False)

# Assuming 'result' is the DataFrame obtained from the previous grouping operation

# Filter the DataFrame for years 2022 and 2023
filtered_result = result[(result['Year'] == 2022) | (result['Year'] == 2023)]

# Get the month columns for 2022 and 2023
months_2022 = [col for col in filtered_result.columns if col.endswith('2022')]
months_2023 = [col for col in filtered_result.columns if col.endswith('2023')]

# Calculate the rolling average for each account for 2022 and 2023
filtered_result[months_2022] = filtered_result.groupby('Account Name')[months_2022].rolling(window=6, min_periods=1).mean().reset_index(drop=True)
filtered_result[months_2023] = filtered_result.groupby('Account Name')[months_2023].rolling(window=6, min_periods=1).mean().reset_index(drop=True)

# Print the updated DataFrame with rolling averages
print(filtered_result)
