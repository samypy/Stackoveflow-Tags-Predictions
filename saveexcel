import os
import glob
import pandas as pd

# set directory path
directory_path = "/path/to/directory"

# check if the directory exists
if not os.path.isdir(directory_path):
    print("Directory does not exist.")
    exit()

# get list of excel files in all subdirectories
excel_files = glob.glob(os.path.join(directory_path, '**/*.xlsx'), recursive=True)

# check if there are any excel files in directory
if not excel_files:
    print("No excel files found in directory.")
    exit()

# read first excel file to get number of columns and headers
df = pd.read_excel(excel_files[0])
num_cols = len(df.columns)
headers = list(df.columns)

# loop through excel files and merge them
for i, excel_file in enumerate(excel_files):
    # read excel file
    df = pd.read_excel(excel_file)
    
    # check if number of columns matches
    if len(df.columns) != num_cols:
        print(f"Skipping {excel_file} because number of columns does not match.")
        continue
    
    # skip header rows for all files except the first one
    if i > 0:
        df = df.iloc[1:]
        df.columns = headers
    
    # merge dataframes
    if i == 0:
        merged_df = df
    else:
        merged_df = pd.concat([merged_df, df], axis=0)
        
# save merged dataframe to excel file
merged_df.to_excel(os.path.join(directory_path, "merged.xlsx"), index=False)
print("Merged file saved to directory.")



import tkinter as tk
from tkinter import filedialog
import fitz

class PDFProcessor:
    def __init__(self, master):
        self.master = master
        self.master.title("PDF Processor")
        self.master.geometry("500x300")
        
        # create log text widget
        self.log_text = tk.Text(self.master, height=10)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # create select pdf button
        self.pdf_button = tk.Button(self.master, text="Select PDF", command=self.select_pdf)
        self.pdf_button.pack(pady=10)
        
        # create select output folder button
        self.output_button = tk.Button(self.master, text="Select Output Folder", command=self.select_output)
        self.output_button.pack(pady=10)
        
        # create process button
        self.process_button = tk.Button(self.master, text="Process", command=self.process_pdf)
        self.process_button.pack(pady=10)
        
        # initialize variables
        self.pdf_file = None
        self.output_folder = None
        
    def select_pdf(self):
        # prompt user to select pdf file
        self.pdf_file = filedialog.askopenfilename(title="Select PDF File", filetypes=[("PDF Files", "*.pdf")])
        self.log(f"Selected PDF file: {self.pdf_file}")
        
    def select_output(self):
        # prompt user to select output folder
        self.output_folder = filedialog.askdirectory(title="Select Output Folder")
        self.log(f"Selected output folder: {self.output_folder}")
        
    def process_pdf(self):
        if not self.pdf_file:
            self.log("Please select a PDF file.")
            return
        if not self.output_folder:
            self.log("Please select an output folder.")
            return
        
        # open input pdf file
        pdf_document = fitz.open(self.pdf_file)
        num_pages = pdf_document.page_count
        self.log(f"Number of pages in PDF: {num_pages}")
        
        # generate images from pdf pages
        for page_num in range(num_pages):
            # get pdf page
            pdf_page = pdf_document[page_num]
            
            # generate image from pdf page
            pix = pdf_page.get_pixmap()
            
            # save image to output folder
            output_file = f"{self.output_folder}/page_{page_num+1}.png"
            pix.save(output_file)
            self.log(f"Page {page_num+1} saved to: {output_file}")
        
        # close pdf document
        pdf_document.close()
        
    def log(self, message):
        # add message to log text widget
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        
if __name__ == "__main__":
    # create main window
    root = tk.Tk()
    
    # create pdf processor UI
    pdf_processor = PDFProcessor(root)
    
    # run UI
    root.mainloop()


import fitz
import os
import PySimpleGUI as sg

def convert_pdf_to_images(pdf_path, output_folder, resolution):
    doc = fitz.open(pdf_path)
    name = os.path.splitext(os.path.basename(pdf_path))[0]
    images_folder = os.path.join(output_folder, name)
    os.makedirs(images_folder, exist_ok=True)
    for i in range(len(doc)):
        page = doc[i]
        rotate = int(0)
        zoom_x = float(resolution) / 100.0
        zoom_y = float(resolution) / 100.0
        trans = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate)
        pm = page.getPixmap(matrix=trans, alpha=False)
        output_file = os.path.join(images_folder, f"{name}_page{i+1}.png")
        pm.writePNG(output_file)

sg.theme('DarkBlue')
layout = [[sg.Text('Select PDF File:'), sg.Input(key='pdf_file'), sg.FileBrowse()],
          [sg.Text('Select Output Folder:'), sg.Input(key='output_folder'), sg.FolderBrowse()],
          [sg.Text('Output Image Resolution (DPI):'), sg.Input(key='resolution', default_text='300')],
          [sg.Button('Convert'), sg.Button('Exit')],
          [sg.Output(size=(60, 15))]]

window = sg.Window('PDF to Image Converter', layout)

while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event == 'Exit':
        break
    if event == 'Convert':
        pdf_file = values['pdf_file']
        output_folder = values['output_folder']
        resolution = values['resolution']
        try:
            convert_pdf_to_images(pdf_file, output_folder, resolution)
            sg.popup('Conversion complete!', title='Success')
        except Exception as e:
            sg.popup(f'Error: {str(e)}', title='Error')
    else:
        continue

window.close()

import os
import fitz
import PySimpleGUI as sg

# Define the PySimpleGUI layout
layout = [
    [sg.Text('Select PDF file: '), sg.Input(key='-FILE-', enable_events=True, visible=False), sg.FileBrowse()],
    [sg.Text('Select output folder: '), sg.Input(key='-FOLDER-', enable_events=True, visible=False), sg.FolderBrowse()],
    [sg.Text('Resolution (dpi): '), sg.Input(key='-RESOLUTION-', default_text='300')],
    [sg.Multiline(key='-LOG-', size=(80, 20), autoscroll=True)],
    [sg.Button('Extract Images'), sg.Button('Exit')]
]

# Create the PySimpleGUI window
window = sg.Window('PDF Image Extractor', layout)

# Event loop
while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event == 'Exit':
        break
    if event == 'Extract Images':
        filename = values['-FILE-']
        output_folder = values['-FOLDER-']
        resolution = int(values['-RESOLUTION-'])

        if not filename:
            sg.popup('Please select a PDF file')
            continue
        if not output_folder:
            sg.popup('Please select an output folder')
            continue

        # Open the PDF file
        pdf = fitz.open(filename)

        # Iterate over each page
        for page in range(pdf.page_count):
            # Get the current page
            current_page = pdf[page]

            # Get the bounding box for the page and apply the rotation
            bbox = current_page.rect
            if current_page.rotation:
                bbox = bbox.rect
                bbox.pre_rotate(-current_page.rotation)

            # Render the page as an image
            pixmap = page.get_pixmap(matrix=fitz.Matrix(300/72, 300/72))
            # Resize the pixmap to desired dimensions
            pixmap = pixmap.scaledToWidth(1200, mode=Qt.SmoothTransformation)

            # Save the image to the output folder
            output_file = os.path.join(output_folder, f'page_{page+1}.png')
            pix.save(output_file)

            # Write to the log
            log_text = f'Saved {output_file}\n'
            window['-LOG-'].print(log_text, end='')

        # Close the PDF file
        pdf.close()

# Close the PySimpleGUI window
window.close()

from PIL import Image, ImageEnhance

#read the image
im = Image.open("ext_im.jpg")

#image brightness enhancer
enhancer = ImageEnhance.Brightness(im)

factor = 1 #gives original image
im_output = enhancer.enhance(factor)
im_output.save('ext_im-1.jpg')

factor = 1.5## brightens the image
im_output = enhancer.enhance(factor)
im_output.save('ext_im-2.jpg')


import cv2
import numpy as np

# Load the image
img = cv2.imread('image.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply binary thresholding to the image
ret, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Apply morphological operations to remove noise and smooth the image
kernel = np.ones((3,3), np.uint8)
closing = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel, iterations=2)

# Find the contours in the image
contours, hierarchy = cv2.findContours(closing, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Iterate through the contours to find the largest rectangle
largest_area = 0
largest_rect = None
for contour in contours:
    area = cv2.contourArea(contour)
    if area > largest_area:
        perimeter = cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, 0.02 * perimeter, True)
        if len(approx) == 4:
            largest_area = area
            largest_rect = approx

# Draw the largest rectangle on the image
cv2.drawContours(img, [largest_rect], 0, (0, 255, 0), 2)

# Display the image with the largest rectangle drawn on it
cv2.imshow('Image', img)
cv2.waitKey(0)
cv2.destroyAllWindows()


import cv2
import numpy as np

# Load the image
img = cv2.imread('image.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply adaptive thresholding to the image
thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 11, 2)

# Apply bilateral filtering to smooth the image while preserving edges
smooth = cv2.bilateralFilter(thresh, 5, 75, 75)

# Apply morphological operations to further remove noise and fill in gaps
kernel = np.ones((3,3), np.uint8)
closing = cv2.morphologyEx(smooth, cv2.MORPH_CLOSE, kernel, iterations=2)

# Save the enhanced image
cv2.imwrite('enhanced_image.jpg', closing)

import cv2

# Load the image
img = cv2.imread('image.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Perform unsharp masking to sharpen the image
blur = cv2.GaussianBlur(gray, (0, 0), 3)
sharpened = cv2.addWeighted(gray, 1.5, blur, -0.5, 0)

# Save the sharpened image
cv2.imwrite('sharpened_image.jpg', sharpened)



import openpyxl

# Open the two Excel files
wb1 = openpyxl.load_workbook('file1.xlsx')
wb2 = openpyxl.load_workbook('file2.xlsx')

# Get the sheets to compare
sheet1 = wb1['Sheet1']
sheet2 = wb2['Sheet1']

# Define the unique ID column
id_col = 'A'

# Define the text value column to compare
text_col = 'B'

# Create a dictionary to store the values of the first file
values1 = {}
for row in sheet1.iter_rows(min_row=2, values_only=True):
    id_value = row[0]
    text_value = row[1]
    values1[id_value] = text_value

# Create a dictionary to store the values of the second file
values2 = {}
for row in sheet2.iter_rows(min_row=2, values_only=True):
    id_value = row[0]
    text_value = row[1]
    values2[id_value] = text_value

# Compare the values and create a new column with the differences
sheet1['C1'] = 'Difference'
for row in sheet1.iter_rows(min_row=2):
    id_value = row[0].value
    if id_value in values2:
        if row[1].value != values2[id_value]:
            row[2].value = f'{row[1].value} != {values2[id_value]}'
    else:
        row[2].value = 'ID not found in second file'

# Save the updated file
wb1.save('file1_updated.xlsx')

import openpyxl

# Open the two Excel files
wb1 = openpyxl.load_workbook('file1.xlsx')
wb2 = openpyxl.load_workbook('file2.xlsx')

# Get the sheets to compare
sheet1 = wb1['Sheet1']
sheet2 = wb2['Sheet1']

# Define the unique ID column
id_col = 'A'

# Get the column headers
headers = [cell.value for cell in sheet1[1]]

# Create a dictionary to store the values of the first file
values1 = {}
for row in sheet1.iter_rows(min_row=2, values_only=True):
    id_value = row[0]
    values1[id_value] = row[1:]

# Create a dictionary to store the values of the second file
values2 = {}
for row in sheet2.iter_rows(min_row=2, values_only=True):
    id_value = row[0]
    values2[id_value] = row[1:]

# Compare the values and create new columns with the differences
for col_idx, header in enumerate(headers[1:], start=2):
    sheet1.cell(row=1, column=col_idx+len(headers)).value = f'{header} Difference'
    for row in sheet1.iter_rows(min_row=2):
        id_value = row[0].value
        if id_value in values2:
            if row[col_idx-1].value != values2[id_value][col_idx-2]:
                row[col_idx+len(headers)-1].value = f'{row[col_idx-1].value} != {values2[id_value][col_idx-2]}'
        else:
            row[col_idx+len(headers)-1].value = 'ID not found in second file'

# Save the updated file
wb1.save('file1_updated.xlsx')

Sub AddColumnsAndLookup()
    Dim wbMaster As Workbook
    Dim wsMaster As Worksheet
    Dim lr As Long
    Dim lookupRange As Range
    Dim vlookupRange As Range
    Dim lastMonthFolder As String
    Dim finalFilePath As String
    
    ' Get the current directory and previous month name
    Dim currDir As String
    currDir = ActiveWorkbook.Path
    lastMonthFolder = Format(DateAdd("m", -1, Date), "mmmm")
    
    ' Set the path to the final file
    finalFilePath = currDir & "\" & lastMonthFolder & "\final.xlsx"
    
    ' Open the master workbook in the background
    Set wbMaster = Workbooks.Open(currDir & "\master.xlsx", False, True)
    Set wsMaster = wbMaster.Sheets(1)
    
    ' Add new columns after column 2
    wsMaster.Columns(3).Insert Shift:=xlToRight
    wsMaster.Columns(3).Insert Shift:=xlToRight
    
    ' Get the last row of the data
    lr = wsMaster.Cells(Rows.Count, 1).End(xlUp).Row
    
    ' Set the lookup range and lookup value range
    Set lookupRange = wsMaster.Range("A2:A" & lr)
    Set vlookupRange = wsMaster.Range("C2:C" & lr)
    
    ' Perform VLOOKUP on the first new column
    vlookupRange.FormulaR1C1 = "=VLOOKUP(RC[-2],'" & finalFilePath & "'!R1C1:R1048576C2,2,FALSE)"
    
    ' Save and close the master workbook
    wbMaster.Save
    wbMaster.Close
    
    ' Clean up
    Set wbMaster = Nothing
    Set wsMaster = Nothing
    Set lookupRange = Nothing
    Set vlookupRange = Nothing
End Sub


Sub VLookupFromAnotherFile()
    Dim lookupValue As Variant
    Dim lookupTableFilePath As String
    Dim lookupTableWorksheetName As String
    Dim lookupTableRange As String
    Dim result As Variant
    
    ' Set the lookup value
    lookupValue = Range("A1").Value
    
    ' Set the path to the lookup table file, the worksheet name, and the range
    lookupTableFilePath = "C:\Lookup.xlsx"
    lookupTableWorksheetName = "Sheet1"
    lookupTableRange = "A:B"
    
    ' Perform the VLOOKUP using the lookup table in the other file
    result = Application.WorksheetFunction.VLookup(lookupValue, _
        "'" & lookupTableFilePath & "[" & lookupTableWorksheetName & "]" & _
        lookupTableRange & "'", 2, False)
    
    ' Display the result
    MsgBox "Result: " & result
End Sub

$Excel = New-Object -ComObject Excel.Application
$Excel.Visible = $false
$Workbook = $Excel.Workbooks.Open("C:\path\to\your\excel\file.xlsm")
$Excel.Run("Macro_Name")
$Workbook.Save()
$Workbook.Close()
$Excel.Quit()

Sub FilterAndStoreUniqueIDs()

    ' Define the range to filter
    Dim rng As Range
    Set rng = Range("A1:A100")
    
    ' Define the dictionary to store unique IDs
    Dim uniqueIDs As Object
    Set uniqueIDs = CreateObject("Scripting.Dictionary")
    
    ' Filter the range to show only unique IDs
    rng.AdvancedFilter Action:=xlFilterCopy, Unique:=True
    
    ' Loop through the visible cells to store unique IDs in the dictionary
    Dim cell As Range
    For Each cell In rng.SpecialCells(xlCellTypeVisible)
        If cell.Value <> "" And Not uniqueIDs.exists(cell.Value) Then
            uniqueIDs.Add cell.Value, cell.Value
        End If
    Next cell
    
    ' Loop through the dictionary to print each unique ID
    Dim key As Variant
    For Each key In uniqueIDs.Keys
        Debug.Print key
    Next key
    
End Sub


Function FindSecondLatestPeriod(latest_period_text As String, ParamArray periods() As Variant) As String
    
    ' Convert the latest period text into an actual date range
    Dim latest_period_start As Date
    Dim latest_period_end As Date
    latest_period_start = DateValue("01 " & Right(latest_period_text, 4))
    latest_period_end = DateSerial(2000 + Right(latest_period_text, 2), MonthName(Left(latest_period_text, 3), True), 30)
    
    ' Declare variables for storing the latest and second latest periods
    Dim latest_period As Variant
    Dim second_latest_period As Variant
    
    ' Loop through all the periods and identify the latest and second latest ones
    For Each period In periods
        Dim period_text As String
        period_text = CStr(period)
        
        ' Convert the period text into an actual date range
        Dim period_start As Date
        Dim period_end As Date
        period_start = DateValue("01 " & Right(period_text, 4))
        period_end = DateSerial(2000 + Right(period_text, 2), MonthName(Left(period_text, 3), True), 30)
        
        ' Check if the period is more recent than the latest period
        If period_start <= latest_period_end And period_end >= latest_period_start Then
            ' If so, set the latest period to this one and move the previous latest period to the second latest period
            second_latest_period = latest_period
            latest_period = period
        ElseIf period_start <= second_latest_period_end And period_end >= second_latest_period_start Then
            ' If not, but it's more recent than the second latest period, set it as the second latest period
            second_latest_period = period
        End If
    Next period
    
    ' Check if a second latest period was found
    If IsEmpty(second_latest_period) Then
        FindSecondLatestPeriod = "No second latest period found."
    Else
        FindSecondLatestPeriod = "The second latest period is " & CStr(second_latest_period) & "."
    End If
    
End Function

Sub FilterTop2Dates()

    ' Define variables
    Dim lastRow As Long
    
    ' Find last row of data
    lastRow = ActiveSheet.Cells(Rows.Count, 1).End(xlUp).Row
    
    ' Apply filter to column A
    Range("A1:A" & lastRow).AutoFilter Field:=1
    
    ' Filter top 2 dates
    ActiveSheet.Range("A1:A" & lastRow).AutoFilter Field:=1, _
        Criteria1:=">=" & WorksheetFunction.Large(Range("A1:A" & lastRow), 2)
    
End Sub
Dim largestDate As Date
Dim secondLargestDate As Date

For Each dateItem In dateObject
    If dateItem > largestDate Then
        secondLargestDate = largestDate
        largestDate = dateItem
    ElseIf dateItem > secondLargestDate And dateItem < largestDate Then
        secondLargestDate = dateItem
    End If
Next dateItem

MsgBox "The second largest date is: " & secondLargestDate
