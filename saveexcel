Sub ListFilesInSubfolder()
    Dim mainFolderPath As String
    Dim subfolderName As String
    Dim docToUploadFolder As String
    Dim objFSO As Object
    Dim objMainFolder As Object
    Dim objSubfolder As Object
    Dim objDocToUploadFolder As Object
    Dim objFile As Object
    Dim i As Integer
    
    ' Define the main folder path to search
    mainFolderPath = "C:\Your\Main\Folder\Path"
    
    ' Initialize the FileSystemObject
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    
    ' Check if the specified main folder exists
    If objFSO.FolderExists(mainFolderPath) Then
        ' Loop through all subfolders within the main folder
        For Each objMainFolder In objFSO.GetFolder(mainFolderPath).Subfolders
            ' Check if the subfolder name starts with "00542"
            If Left(objMainFolder.Name, 5) = "00542" Then
                ' Set objSubfolder to the matching subfolder
                Set objSubfolder = objMainFolder
                
                ' Check if the subfolder contains a folder with a name like "Doc to Upload" (case-insensitive)
                For Each objDocToUploadFolder In objSubfolder.Subfolders
                    If UCase(objDocToUploadFolder.Name) Like "*DOC TO UPLOAD*" Then
                        ' List all files in the "Doc to Upload" folder
                        i = 1
                        For Each objFile In objDocToUploadFolder.Files
                            ' Output file names to the immediate window
                            Debug.Print "File " & i & ": " & objFile.Name
                            i = i + 1
                        Next objFile
                    End If
                Next objDocToUploadFolder
            End If
        Next objMainFolder
    Else
        MsgBox "Main folder not found: " & mainFolderPath, vbExclamation
    End If
    
    ' Release the objects
    Set objFSO = Nothing
    Set objMainFolder = Nothing
    Set objSubfolder = Nothing
    Set objDocToUploadFolder = Nothing
    Set objFile = Nothing
End Sub


Sub FindFolderInSubfolders()
    Dim mainFolderPath As String
    Dim objFSO As Object
    Dim objMainFolder As Object
    Dim objSubfolder As Object
    
    ' Define the main folder path (e.g., "Documents") to search
    mainFolderPath = "C:\Your\Main\Folder\Path\Documents"
    
    ' Initialize the FileSystemObject
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    
    ' Check if the specified main folder exists
    If objFSO.FolderExists(mainFolderPath) Then
        ' Loop through all subfolders within the main folder (Folder1, Folder2, etc.)
        For Each objMainFolder In objFSO.GetFolder(mainFolderPath).Subfolders
            ' Loop through subfolders within each of the 10 folders
            For Each objSubfolder In objMainFolder.Subfolders
                ' Check if the subfolder name starts with "00521"
                If Left(objSubfolder.Name, 5) = "00521" Then
                    MsgBox "Found folder: " & objSubfolder.Path
                    ' If you want to stop searching after finding the first match, you can exit the loop here.
                    ' Exit For
                End If
            Next objSubfolder
        Next objMainFolder
    Else
        MsgBox "Main folder not found: " & mainFolderPath, vbExclamation
    End If
    
    ' Release the objects
    Set objFSO = Nothing
    Set objMainFolder = Nothing
    Set objSubfolder = Nothing
End Sub
Sub ReadColumnBAndStoreInVariable()
    Dim filePath As String
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim cell As Range
    Dim csvData As String
    
    ' Specify the file path of the Excel file you want to read
    filePath = "C:\Path\To\Your\File.xlsx"
    
    ' Open the Excel file in read-only mode
    Set ws = Workbooks.Open(filePath, ReadOnly:=True).Worksheets(1)
    
    ' Find the last used row in column B
    lastRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row
    
    ' Loop through each cell in column B and concatenate values with a comma
    For Each cell In ws.Range("B1:B" & lastRow)
        csvData = csvData & cell.Value & ","
    Next cell
    
    ' Remove the trailing comma
    csvData = Left(csvData, Len(csvData) - 1)
    
    ' Close the Excel file
    Workbooks.Open(filePath).Close SaveChanges:=False
    
    ' Store the CSV data in the filePath variable
    filePath = csvData
End Sub

Sub SendEmailsWithAttachments()
    Dim OutlookApp As Object
    Dim OutlookMail As Object
    Dim ws As Worksheet
    Dim LastRow As Long
    Dim Recipient As String
    Dim Subject As String
    Dim Body As String
    Dim Attachments As String
    Dim AttachmentArray() As String
    Dim AttachmentPath As String
    Dim i As Long
    
    ' Initialize Outlook
    Set OutlookApp = CreateObject("Outlook.Application")
    
    ' Set the worksheet to Sheet2
    Set ws = ThisWorkbook.Sheets("Sheet2")
    
    ' Find the last row in Column B (assuming Column B has the email addresses)
    LastRow = ws.Cells(ws.Rows.Count, 2).End(xlUp).Row
    
    ' Loop through each row in Column B (from row 2 to LastRow)
    For i = 2 To LastRow
        ' Set email details
        Recipient = ws.Cells(i, 2).Value ' Email address from Column B
        Subject = "Your Subject Here"
        Body = "Your email body here."
        Attachments = ws.Cells(i, 31).Value ' File paths from Column AE
        
        ' Split the Attachments string into an array based on commas
        AttachmentArray = Split(Attachments, ",")
        
        ' Create a new email
        Set OutlookMail = OutlookApp.CreateItem(0)
        
        ' Set email properties
        With OutlookMail
            .To = Recipient
            .Subject = Subject
            .Body = Body
            
            ' Attach files
            For Each AttachmentPath In AttachmentArray
                If Trim(AttachmentPath) <> "" Then
                    .Attachments.Add AttachmentPath
                End If
            Next AttachmentPath
            
            ' Send the email
            .Send
        End With
        
        ' Release the Outlook email object
        Set OutlookMail = Nothing
    Next i
    
    ' Release the Outlook application object
    Set OutlookApp = Nothing
End Sub
 ' Remove the signature from the email
        Set olItem = OutlookMail.GetInspector.WordEditor
        Set olNs = OutlookApp.GetNamespace("MAPI")
        olItem.Application.ActiveDocument.Content.Delete
        olItem.Application.ActiveDocument.Content.Paste
Dim olNs As Object
    Dim olItem As Object
Sub RemoveFiltersFromAllSheets()
    Dim ws As Worksheet
    
    ' Loop through all worksheets in the workbook
    For Each ws In ThisWorkbook.Worksheets
        ' Check if the worksheet has AutoFilter turned on
        If ws.AutoFilterMode Then
            ' Remove the filter
            ws.AutoFilterMode = False
        End If
    Next ws
End Sub
    ' Loop through all ListObjects (tables) on the worksheet
    For Each tbl In ws.ListObjects
        If tbl.ShowAutoFilter Then
            tbl.AutoFilter.ShowAllData
        End If
    Next tbl


Sub CheckForDifferentValues()
    Dim ws As Worksheet
    Dim cell As Range
    Dim column As Range
    Dim checkValue As Variant
    Dim differentColumn As String
    Dim isDifferent As Boolean
    
    ' Set the worksheet you want to work with
    Set ws = ThisWorkbook.Worksheets("Sheet1") ' Change "Sheet1" to your sheet's name
    
    ' Initialize variables
    isDifferent = False
    
    ' Loop through each cell in the range D2 to J2
    For Each cell In ws.Range("D2:J2")
        ' If the cell is not empty
        If Not IsEmpty(cell.Value) Then
            ' If checkValue is empty, set it to the current cell's value
            If IsEmpty(checkValue) Then
                checkValue = cell.Value
            Else
                ' If the current cell's value is different from checkValue, set isDifferent to True
                If cell.Value <> checkValue Then
                    isDifferent = True
                    Exit For ' Exit the loop if a difference is found
                End If
            End If
        End If
    Next cell
    
    ' If there is a difference, find the column with the different value
    If isDifferent Then
        For Each column In ws.Range("D1:J1")
            If column.Value <> checkValue Then
                differentColumn = column.Value
                Exit For ' Exit the loop if the different column is found
            End If
        Next column
        
        ' Display the column name with the different value
        MsgBox "The column with a different value is: " & differentColumn
    Else
        ' If all values are the same, display a message
        MsgBox "All values in the range are the same."
    End If
    
    ' Clean up
    Set ws = Nothing
End Sub
import re

# Sample text
email_body = """
This is some introductory text.
Research Morning call Agenda:
- Discuss project updates
- Review financial reports
- Plan for the week ahead

This is some more text.
"""

# Extract text after "Research Morning call Agenda" until the next new line
pattern = r"Research Morning call Agenda:(.*?)(\n|$)"
matches = re.search(pattern, email_body, re.DOTALL)

if matches:
    agenda_text = matches.group(1).strip()
    print(agenda_text)
else:
    print("Agenda not found in the email body.")
# Sample text
email_body = """
This is some introductory text.
Research Morning call Agenda:
- Discuss project updates
- Review financial reports
- Plan for the week ahead

This is some more text.
"""

# Split the email body by lines
lines = email_body.split('\n')

# Initialize a flag to start capturing text
capture_text = False

# Initialize an empty list to store the captured lines
captured_lines = []

# Iterate through the lines and capture text after "Research Morning call Agenda"
for line in lines:
    if capture_text:
        captured_lines.append(line)
    elif "Research Morning call Agenda:" in line:
        capture_text = True

# Combine the captured lines into a single text
agenda_text = '\n'.join(captured_lines)

# Remove leading and trailing whitespace
agenda_text = agenda_text.strip()

print(agenda_text)

Sub ExtractNumberedListFromEmail()
    Dim olApp As Outlook.Application
    Dim olNamespace As Outlook.NameSpace
    Dim olFolder As Outlook.MAPIFolder
    Dim olMail As Outlook.MailItem
    Dim strSubject As String
    Dim strBody As String
    Dim pattern As String
    Dim regex As Object
    Dim matches As Object
    Dim i As Integer
    
    ' Define the subject to filter for
    strSubject = "Europe"
    
    ' Set up Outlook
    Set olApp = New Outlook.Application
    Set olNamespace = olApp.GetNamespace("MAPI")
    
    ' Get the Inbox folder
    Set olFolder = olNamespace.GetDefaultFolder(olFolderInbox)
    
    ' Loop through the emails in the Inbox
    For Each olMail In olFolder.Items
        ' Check if the email subject matches
        If InStr(1, olMail.Subject, strSubject, vbTextCompare) > 0 And olMail.SenderName = "James Wilt" Then
            strBody = olMail.Body
            ' Define the regular expression pattern
            pattern = "Western Europe:(.*?)(\d+\.\s|$)"
            
            ' Create a regular expression object
            Set regex = CreateObject("VBScript.RegExp")
            With regex
                .Global = True
                .MultiLine = True
                .IgnoreCase = True
                .pattern = pattern
            End With
            
            ' Execute the regular expression
            Set matches = regex.Execute(strBody)
            
            ' Print the matched text (numbered list items)
            For i = 0 To matches.Count - 1
                Debug.Print matches(i).SubMatches(0)
            Next i
            
            ' Exit the loop after processing the email
            Exit For
        End If
    Next olMail
    
    ' Clean up objects
    Set regex = Nothing
    Set matches = Nothing
    Set olMail = Nothing
    Set olFolder = Nothing
    Set olNamespace = Nothing
    Set olApp = Nothing
End Sub
