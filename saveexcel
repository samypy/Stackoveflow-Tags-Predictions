Sub ListFilesInSubfolder()
    Dim mainFolderPath As String
    Dim subfolderName As String
    Dim docToUploadFolder As String
    Dim objFSO As Object
    Dim objMainFolder As Object
    Dim objSubfolder As Object
    Dim objDocToUploadFolder As Object
    Dim objFile As Object
    Dim i As Integer
    
    ' Define the main folder path to search
    mainFolderPath = "C:\Your\Main\Folder\Path"
    
    ' Initialize the FileSystemObject
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    
    ' Check if the specified main folder exists
    If objFSO.FolderExists(mainFolderPath) Then
        ' Loop through all subfolders within the main folder
        For Each objMainFolder In objFSO.GetFolder(mainFolderPath).Subfolders
            ' Check if the subfolder name starts with "00542"
            If Left(objMainFolder.Name, 5) = "00542" Then
                ' Set objSubfolder to the matching subfolder
                Set objSubfolder = objMainFolder
                
                ' Check if the subfolder contains a folder with a name like "Doc to Upload" (case-insensitive)
                For Each objDocToUploadFolder In objSubfolder.Subfolders
                    If UCase(objDocToUploadFolder.Name) Like "*DOC TO UPLOAD*" Then
                        ' List all files in the "Doc to Upload" folder
                        i = 1
                        For Each objFile In objDocToUploadFolder.Files
                            ' Output file names to the immediate window
                            Debug.Print "File " & i & ": " & objFile.Name
                            i = i + 1
                        Next objFile
                    End If
                Next objDocToUploadFolder
            End If
        Next objMainFolder
    Else
        MsgBox "Main folder not found: " & mainFolderPath, vbExclamation
    End If
    
    ' Release the objects
    Set objFSO = Nothing
    Set objMainFolder = Nothing
    Set objSubfolder = Nothing
    Set objDocToUploadFolder = Nothing
    Set objFile = Nothing
End Sub


Sub FindFolderInSubfolders()
    Dim mainFolderPath As String
    Dim objFSO As Object
    Dim objMainFolder As Object
    Dim objSubfolder As Object
    
    ' Define the main folder path (e.g., "Documents") to search
    mainFolderPath = "C:\Your\Main\Folder\Path\Documents"
    
    ' Initialize the FileSystemObject
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    
    ' Check if the specified main folder exists
    If objFSO.FolderExists(mainFolderPath) Then
        ' Loop through all subfolders within the main folder (Folder1, Folder2, etc.)
        For Each objMainFolder In objFSO.GetFolder(mainFolderPath).Subfolders
            ' Loop through subfolders within each of the 10 folders
            For Each objSubfolder In objMainFolder.Subfolders
                ' Check if the subfolder name starts with "00521"
                If Left(objSubfolder.Name, 5) = "00521" Then
                    MsgBox "Found folder: " & objSubfolder.Path
                    ' If you want to stop searching after finding the first match, you can exit the loop here.
                    ' Exit For
                End If
            Next objSubfolder
        Next objMainFolder
    Else
        MsgBox "Main folder not found: " & mainFolderPath, vbExclamation
    End If
    
    ' Release the objects
    Set objFSO = Nothing
    Set objMainFolder = Nothing
    Set objSubfolder = Nothing
End Sub
Sub ReadColumnBAndStoreInVariable()
    Dim filePath As String
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim cell As Range
    Dim csvData As String
    
    ' Specify the file path of the Excel file you want to read
    filePath = "C:\Path\To\Your\File.xlsx"
    
    ' Open the Excel file in read-only mode
    Set ws = Workbooks.Open(filePath, ReadOnly:=True).Worksheets(1)
    
    ' Find the last used row in column B
    lastRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row
    
    ' Loop through each cell in column B and concatenate values with a comma
    For Each cell In ws.Range("B1:B" & lastRow)
        csvData = csvData & cell.Value & ","
    Next cell
    
    ' Remove the trailing comma
    csvData = Left(csvData, Len(csvData) - 1)
    
    ' Close the Excel file
    Workbooks.Open(filePath).Close SaveChanges:=False
    
    ' Store the CSV data in the filePath variable
    filePath = csvData
End Sub

Sub SendEmailsWithAttachments()
    Dim OutlookApp As Object
    Dim OutlookMail As Object
    Dim ws As Worksheet
    Dim LastRow As Long
    Dim Recipient As String
    Dim Subject As String
    Dim Body As String
    Dim Attachments As String
    Dim AttachmentArray() As String
    Dim AttachmentPath As String
    Dim i As Long
    
    ' Initialize Outlook
    Set OutlookApp = CreateObject("Outlook.Application")
    
    ' Set the worksheet to Sheet2
    Set ws = ThisWorkbook.Sheets("Sheet2")
    
    ' Find the last row in Column B (assuming Column B has the email addresses)
    LastRow = ws.Cells(ws.Rows.Count, 2).End(xlUp).Row
    
    ' Loop through each row in Column B (from row 2 to LastRow)
    For i = 2 To LastRow
        ' Set email details
        Recipient = ws.Cells(i, 2).Value ' Email address from Column B
        Subject = "Your Subject Here"
        Body = "Your email body here."
        Attachments = ws.Cells(i, 31).Value ' File paths from Column AE
        
        ' Split the Attachments string into an array based on commas
        AttachmentArray = Split(Attachments, ",")
        
        ' Create a new email
        Set OutlookMail = OutlookApp.CreateItem(0)
        
        ' Set email properties
        With OutlookMail
            .To = Recipient
            .Subject = Subject
            .Body = Body
            
            ' Attach files
            For Each AttachmentPath In AttachmentArray
                If Trim(AttachmentPath) <> "" Then
                    .Attachments.Add AttachmentPath
                End If
            Next AttachmentPath
            
            ' Send the email
            .Send
        End With
        
        ' Release the Outlook email object
        Set OutlookMail = Nothing
    Next i
    
    ' Release the Outlook application object
    Set OutlookApp = Nothing
End Sub
 ' Remove the signature from the email
        Set olItem = OutlookMail.GetInspector.WordEditor
        Set olNs = OutlookApp.GetNamespace("MAPI")
        olItem.Application.ActiveDocument.Content.Delete
        olItem.Application.ActiveDocument.Content.Paste
Dim olNs As Object
    Dim olItem As Object
